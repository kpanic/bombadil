defmodule BombadilTest do
  use Bombadil.RepoCase
  alias Bombadil.TestRepo
  alias Bombadil.Ecto.Schema.SearchIndex

  describe "indexing" do
    test "simple payload" do
      assert {:ok, _} =
               TestRepo.insert_or_update(Bombadil.index(SearchIndex, payload: %{"ask" => "ciao"}))
    end

    test "index payload with additional fields" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{"ask" => "ciao"},
                   test: "I was generated by config dynamically!"
                 )
               )

      assert [%_{payload: %{"ask" => "ciao"}, test: "I was generated by config dynamically!"}] =
               TestRepo.all(Bombadil.search(SearchIndex, [%{"ask" => "ciao"}]))
    end
  end

  describe "search with list of maps" do
    test "search payload (exact match with multiple criterias)" do
      assert {:ok, _} =
               TestRepo.insert_or_update(Bombadil.index(SearchIndex, payload: %{"ask" => "ciao"}))

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, payload: %{"ask" => "ciao2"})
               )

      assert [%_{payload: %{"ask" => "ciao"}}, %_{payload: %{"ask" => "ciao2"}}] =
               TestRepo.all(
                 Bombadil.search(SearchIndex, [%{"ask" => "ciao"}, %{"ask" => "ciao2"}])
               )
    end

    test "search payload (exact match with one criteria)" do
      assert {:ok, _} =
               TestRepo.insert_or_update(Bombadil.index(SearchIndex, payload: %{"ask" => "ciao"}))

      assert [%_{payload: %{"ask" => "ciao"}}] =
               TestRepo.all(Bombadil.search(SearchIndex, [%{"ask" => "ciao"}]))
    end

    test "search payload (does not match)" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, payload: %{"ask" => "hello"})
               )

      assert [] = TestRepo.all(Bombadil.search(SearchIndex, [%{"ask" => "ciao"}]))
    end

    test "index payload with composite words and map" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{"ask" => "?ciao._nested_and_other_things"}
                 )
               )

      assert [%_{payload: %{"ask" => "?ciao._nested_and_other_things"}}] =
               TestRepo.all(Bombadil.search(SearchIndex, [%{"ask" => "_nested"}]))
    end
  end

  describe "full text search" do
    test "simple match" do
      assert {:ok, _} =
               TestRepo.insert_or_update(Bombadil.index(SearchIndex, payload: %{"ask" => "ciao"}))

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, payload: %{"ask" => "ciao2"})
               )

      assert [%_{payload: %{"ask" => "ciao2"}}] =
               TestRepo.all(Bombadil.search(SearchIndex, "ciao2"))
    end

    test "simple match with metadata" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{"ask" => "hello world", "metadata" => [%{"meta" => "data"}]}
                 )
               )

      assert [%_{payload: %{"ask" => "hello world", "metadata" => [%{"meta" => "data"}]}}] =
               TestRepo.all(Bombadil.search(SearchIndex, "hello world"))
    end

    test "index payload with composite words" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{"ask" => "?ciao._nested_and_other_things"}
                 )
               )

      assert [%_{payload: %{"ask" => "?ciao._nested_and_other_things"}}] =
               TestRepo.all(Bombadil.search(SearchIndex, "_nested"))
    end
  end

  describe "fuzzy search" do
    test "simple match" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{"ask" => "hello fuzzy", "metadata" => [%{"meta" => "data"}]}
                 )
               )

      assert [%_{payload: %{"ask" => "hello fuzzy", "metadata" => [%{"meta" => "data"}]}}] =
               TestRepo.all(Bombadil.fuzzy_search(SearchIndex, "hello fuzzy"))
    end

    test "simple fuzy match on a specific field" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, payload: %{"ask" => "hello fuzzy"})
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, payload: %{"dont_look_at_me" => "hello fuzzy"})
               )

      assert [%_{payload: %{"ask" => "hello fuzzy"}, id: _id, test: _test}] =
               TestRepo.all(Bombadil.fuzzy_search(SearchIndex, [%{"ask" => "hello fuzy"}]))
    end

    test "simple speling error match" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{"ask" => "hello fuzzy", "metadata" => [%{"meta" => "data"}]}
                 )
               )

      assert [%{payload: %{"ask" => "hello fuzzy", "metadata" => [%{"meta" => "data"}]}}] =
               TestRepo.all(Bombadil.fuzzy_search(SearchIndex, "fuzy"))
    end

    test "simple speling error with sorted multiple matches" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{
                     "ask" => "fuzzy",
                     "test" => "foozy",
                     "metadata" => [%{"meta" => "data"}]
                   }
                 )
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{
                     "ask" => "hello fuzzy2",
                     "test" => "foozy3",
                     "metadata" => [%{"meta" => "data"}]
                   }
                 )
               )

      assert [
               %{payload: %{"ask" => "fuzzy", "metadata" => [%{"meta" => "data"}]}},
               %{payload: %{"ask" => "hello fuzzy2", "metadata" => [%{"meta" => "data"}]}}
             ] = TestRepo.all(Bombadil.fuzzy_search(SearchIndex, "fuzy"))

      assert [
               %{payload: %{"ask" => "hello fuzzy2", "metadata" => [%{"meta" => "data"}]}}
             ] = TestRepo.all(Bombadil.fuzzy_search(SearchIndex, "hel"))

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{
                     "ask" => "hello fuzzy3",
                     "test" => "foozy2",
                     "metadata" => [%{"meta" => "data"}]
                   }
                 )
               )

      assert [
               %_{payload: %{"ask" => "fuzzy", "test" => "foozy"}, id: _, test: _},
               %_{payload: %{"ask" => "hello fuzzy2", "test" => "foozy3"}, id: _, test: _},
               %_{payload: %{"ask" => "hello fuzzy3", "test" => "foozy2"}, id: _, test: _}
             ] =
               TestRepo.all(
                 Bombadil.fuzzy_search(SearchIndex, [%{"ask" => "fluffy", "test" => "foozy"}])
               )
    end

    test "speling error match with nested payload" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   payload: %{
                     "payload" => %{"ask" => "hello fuzzy"},
                     "metadata" => [%{"meta" => "data"}]
                   }
                 )
               )

      assert [
               %_{
                 payload: %{
                   "payload" => %{
                     "ask" => "hello fuzzy"
                   },
                   "metadata" => [%{"meta" => "data"}]
                 }
               }
             ] = TestRepo.all(Bombadil.fuzzy_search(SearchIndex, "fuzy"))
    end
  end

  describe "search with a context" do
    test "and exact match" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, item_id: 42, payload: %{"ask" => "hello exact match"})
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   item_id: 42,
                   payload: %{"ask" => "I am hiding with the same id, don't find me!"}
                 )
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   item_id: 24,
                   payload: %{"dont_look_at_me" => "hello exact match"}
                 )
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   item_id: 55,
                   payload: %{"ask" => "hello exact match 2"}
                 )
               )

      assert [
               %Bombadil.Ecto.Schema.SearchIndex{
                 id: _id,
                 item_id: 42,
                 payload: %{"ask" => "hello exact match"},
                 test: nil
               }
             ] =
               TestRepo.all(
                 Bombadil.search(SearchIndex, [%{"ask" => "hello exact match"}],
                   context: %{item_id: 42}
                 )
               )

      assert [
               %Bombadil.Ecto.Schema.SearchIndex{
                 id: _id,
                 item_id: 42,
                 payload: %{"ask" => "hello exact match"},
                 test: nil
               }
             ] =
               TestRepo.all(
                 Bombadil.search(SearchIndex, "hello exact match", context: %{item_id: 42})
               )

      assert [
               %Bombadil.Ecto.Schema.SearchIndex{
                 id: _,
                 item_id: 42,
                 payload: %{"ask" => "hello exact match"},
                 test: nil
               },
               %Bombadil.Ecto.Schema.SearchIndex{
                 id: _,
                 item_id: 55,
                 payload: %{"ask" => "hello exact match 2"},
                 test: nil
               }
             ] = TestRepo.all(Bombadil.search(SearchIndex, [%{"ask" => "hello exact match"}]))
    end

    test "and fuzzy search" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, item_id: 42, payload: %{"ask" => "hello fuzzy"})
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   item_id: 42,
                   payload: %{"ask" => "I am hiding with the same id, don't find me!"}
                 )
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex,
                   item_id: 24,
                   payload: %{"dont_look_at_me" => "hello fuzzy"}
                 )
               )

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(SearchIndex, payload: %{"dont_look_at_me" => "hello fuzzy"})
               )

      assert [%_{payload: %{"ask" => "hello fuzzy"}, id: _id, test: _test, item_id: 42}] =
               TestRepo.all(
                 Bombadil.fuzzy_search(SearchIndex, [%{"ask" => "hello fuzy"}],
                   context: %{item_id: 42}
                 )
               )

      assert [%_{payload: %{"ask" => "hello fuzzy"}, id: _id, test: _test, item_id: 42}] =
               TestRepo.all(
                 Bombadil.fuzzy_search(SearchIndex, "hello fuzy", context: %{item_id: 42})
               )
    end
  end

  defmodule TestSchema do
    use Ecto.Schema

    schema "search_index" do
      field(:payload, :map)
      field(:item_id, :integer)
    end
  end

  defmodule TestSchemaWithCustomColumn do
    use Ecto.Schema

    schema "search_index" do
      field(:data, :map, source: :payload)
      field(:item_id, :integer)
    end
  end

  describe "user provided schema" do
    test "with fuzzy search" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(TestSchema, item_id: 42, payload: %{"ask" => "hello fuzzy"})
               )

      assert [%_{payload: %{"ask" => "hello fuzzy"}, id: _id, item_id: 42} = result] =
               TestRepo.all(
                 Bombadil.fuzzy_search(TestSchema, "hello fuzy", context: %{item_id: 42})
               )

      refute :test in Map.keys(result)
    end

    test "updating a record in the index" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(TestSchema, item_id: 42, payload: %{"ask" => "hello fuzzy"})
               )

      record = TestRepo.get_by!(TestSchema, item_id: 42)

      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(TestSchema, record, payload: %{"ask" => "me anything"})
               )

      assert %{payload: %{"ask" => "me anything"}, item_id: 42} =
               TestRepo.get_by!(TestSchema, item_id: 42)
    end

    test "with fuzzy search and custom column" do
      assert {:ok, _} =
               TestRepo.insert_or_update(
                 Bombadil.index(TestSchemaWithCustomColumn,
                   item_id: 42,
                   data: %{"ask" => "hello fuzzy"}
                 )
               )

      assert [%_{data: %{"ask" => "hello fuzzy"}, id: _id, item_id: 42}] =
               TestRepo.all(
                 Bombadil.fuzzy_search(TestSchemaWithCustomColumn, "hello fuzy",
                   context: %{item_id: 42}
                 )
               )
    end
  end
end
